[{"C:\\Users\\user\\.vscode\\react\\calculator\\src\\index.js":"1","C:\\Users\\user\\.vscode\\react\\calculator\\src\\App.js":"2"},{"size":158,"mtime":1628466370110,"results":"3","hashOfConfig":"4"},{"size":5455,"mtime":1628473202012,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vhrgre",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\user\\.vscode\\react\\calculator\\src\\index.js",[],"C:\\Users\\user\\.vscode\\react\\calculator\\src\\App.js",["11"],"import React, { useState } from \"react\";\r\nimport \"./App.scss\"\r\n\r\nconst App = () => {\r\n  const [hisList, setHisList] = useState([]);\r\n  const [ansList, setAnsList] = useState([]);\r\n  const [preflag, setPreflag] = useState(false);\r\n  const [popupOn, setPopupOn] = useState(false);\r\n  const [inputs, setInputs] = useState('0');\r\n\r\n  // used only at inputc()\r\n  // !not important\r\n  const [flag, setFlag] = useState(false);\r\n  const [lcnt, setLcnt] = useState(0);\r\n  const [rcnt, setRcnt] = useState(0);\r\n  const [last, setLast] = useState('');\r\n  \r\n  // just for avoiding error of eval()\r\n  // !not important\r\n  const inputc = (c) => {\r\n    const cals = ['+', '-', '*', '/', '=', 'AC', 'del', '('];\r\n    const fours = ['+', '-', '*', '/'];\r\n    const adds = ['+', '-'];\r\n    const muls = ['*', '/'];\r\n\r\n    if(preflag) setPreflag(false);\r\n\r\n    if(c === 'AC'){\r\n      setInputs('0');\r\n      setLcnt(0);\r\n      setRcnt(0);\r\n      return;\r\n    }\r\n\r\n    if(c === ')'){\r\n      if(rcnt >= lcnt || cals.indexOf(last) !== -1) return;\r\n      setRcnt(rcnt + 1);\r\n    }\r\n    else if(c === '('){\r\n      if(cals.indexOf(last) === -1 && last !== '') return;\r\n      setLcnt(lcnt + 1);\r\n    }\r\n\r\n    if(c === 'del'){\r\n      setInputs(inputs.slice(0, -1));\r\n      if(last === '(') setLcnt(lcnt - 1);\r\n      else if(last === ')') setRcnt(rcnt - 1);\r\n      setLast(inputs[inputs.length - 1]);\r\n    }\r\n    else if(c === '='){\r\n      if(cals.indexOf(last) !== -1 && last !== ')') return;\r\n      else if(lcnt !== rcnt) return;\r\n      let temp = eval(inputs).toString();\r\n      \r\n      if(temp.length > 14) temp = temp.substr(0, 14);\r\n      \r\n      if(hisList.length > 4){\r\n        setHisList(hisList.slice(1).concat(inputs));\r\n        setAnsList(ansList.slice(1).concat(temp));\r\n      }\r\n      else{\r\n        setHisList(hisList.concat(inputs));\r\n        setAnsList(ansList.concat(temp));\r\n      }\r\n      setInputs(temp);\r\n      setLast('');\r\n      setLcnt(0);\r\n      setRcnt(0);\r\n      setPreflag(true);\r\n    }\r\n    else if(inputs.length > 14) return;\r\n    else if(inputs === '0'){\r\n      if(cals.indexOf(c) !== -1 && c !== '-' && c !== '(') return;\r\n      else if(c === '-'){\r\n        setInputs(inputs + c);\r\n        setLast(c);\r\n      }\r\n      else{\r\n        setInputs(c);\r\n        setLast(c);\r\n      }\r\n    }\r\n    else{\r\n      if(last === '/' && c === '0') return;\r\n      else if(adds.indexOf(last) !== -1){\r\n        if(fours.indexOf(c) !== -1){\r\n          if(muls.indexOf(c) !== -1){\r\n            if(flag){\r\n              return;\r\n            }\r\n          }\r\n          setInputs(inputs.slice(0, -1) + c);\r\n        }\r\n        else setInputs(inputs + c);\r\n      }\r\n      else if(muls.indexOf(last) !== -1){\r\n        if(muls.indexOf(c) !== -1) setInputs(inputs.slice(0, -1) + c);\r\n        else if(adds.indexOf(c) !== -1){\r\n          if(c === '-') setInputs(inputs + c);\r\n          setLast(c);\r\n          setFlag(true);\r\n          return;\r\n        }\r\n        else setInputs(inputs + c);\r\n      }\r\n      else setInputs(inputs + c);\r\n      setLast(c);\r\n      if(flag) setFlag(false);\r\n    }\r\n  };\r\n\r\n  const ButtonWrapper = probs => {\r\n    let buttons =[];\r\n    const lst = probs.lst, mrk = probs.mrk;\r\n    for(let i = 0; i < lst.length; i++) buttons.push(<button className={mrk[i]} onClick={()=>inputc(lst[i])} key={lst[i]}>{lst[i]}</button>);\r\n    return <div className=\"buttonWrap\">{buttons}</div>;\r\n  };\r\n\r\n  const PrintHistory = () => {\r\n    let l = hisList.length;\r\n    if(l === 0) return <div id=\"popupContent\">이전 계산식과 결과가 여기에 표시되어 다시 사용할 수 있습니다.</div>;\r\n    \r\n    const phistory = [];\r\n    for(let i = l -1; i >= 0; i--){\r\n      let temp = [];\r\n      temp.push(<button className=\"historyButton\" key={'historyButton-'+i+'-0'} onClick={() => setInputs(hisList[i])}>{hisList[i]}</button>);\r\n      temp.push(<div className=\"innerText\" key={'innerText-'+i}>=</div>);\r\n      temp.push(<button className=\"historyButton\" key={'historyButton-'+i+'-1'} onClick={() => setInputs(ansList[i])}>{ansList[i]}</button>);\r\n      phistory.push(<div className='historyButtonWrap' key={'historyButtonWrap-'+i}>{temp}</div>);\r\n    }\r\n    return phistory;\r\n  }\r\n\r\n  const PrintPre = () => {\r\n    if(preflag) return hisList[hisList.length-1] + ' =';\r\n    else if(ansList.length === 0) return \"JMJ's calculator!\"\r\n    else return 'Ans = ' + ansList[ansList.length-1];\r\n  }\r\n\r\n  return (\r\n    <calculator>\r\n      <screen>\r\n        <div id=\"popupOn\" className={popupOn ? \"hide\" : \"\"}><button class=\"popupButton\" onClick={()=>setPopupOn(true)}>☆</button></div>\r\n        <div id=\"popup\" className={popupOn ? \"\" : \"hide\"}>\r\n          <div id=\"popupOff\"><button class=\"popupButton\" onClick={()=>setPopupOn(false)}>★</button></div>\r\n          <PrintHistory/>\r\n        </div>\r\n        <div id=\"answers\">\r\n          <div id=\"preanswer\"><PrintPre/></div>\r\n          <div id=\"answer\">{inputs}</div>\r\n        </div>\r\n      </screen>\r\n      <calculatorbody>\r\n        <ButtonWrapper lst={['(', ')', 'del', 'AC']} mrk={['cals', 'cals', 'cals', 'cals']}/>\r\n        <ButtonWrapper lst={['7', '8', '9', '/']} mrk={['', '', '', 'cals']}/>\r\n        <ButtonWrapper lst={['4', '5', '6', '*']} mrk={['', '', '', 'cals']}/>\r\n        <ButtonWrapper lst={['1', '2', '3', '-']} mrk={['', '', '', 'cals']}/>\r\n        <ButtonWrapper lst={['0', '.', '=', '+']} mrk={['', '', 'ans', 'cals']}/>\r\n      </calculatorbody>\r\n    </calculator>\r\n  );\r\n};\r\n\r\nexport default App;\r\n",{"ruleId":"12","severity":1,"message":"13","line":53,"column":18,"nodeType":"14","messageId":"15","endLine":53,"endColumn":22},"no-eval","eval can be harmful.","CallExpression","unexpected"]